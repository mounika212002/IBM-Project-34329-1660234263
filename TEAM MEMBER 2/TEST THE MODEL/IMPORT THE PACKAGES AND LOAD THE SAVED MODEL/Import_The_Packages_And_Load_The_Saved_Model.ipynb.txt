{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "IMSYr8939ZgK"
      },
      "outputs": [],
      "source": [
        "#PNT2022TMID37513\n",
        "\n",
        "#Real-Time Communication System Powered by AI for Specially abled"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "kZ4eXXOCgB6i"
      },
      "outputs": [],
      "source": [
        "from keras.preprocessing.image import ImageDataGenerator\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "mYRV3zGggHQg"
      },
      "outputs": [],
      "source": [
        "train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "Eb0hE5pbjcvx"
      },
      "outputs": [],
      "source": [
        "test_datagen=ImageDataGenerator(rescale=1./255)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DxojUOAkawKx",
        "outputId": "6ef00f33-4114-4a24-e8d9-c97e4ba29a27"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tGxN6C4sgHVy",
        "outputId": "6ca1fae1-a478-4a0b-98f2-aed08ec91488"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 2250 images belonging to 9 classes.\n"
          ]
        }
      ],
      "source": [
        "x_test = train_datagen.flow_from_directory('/content/drive/MyDrive/Dataset/test_set',target_size=(64,64),batch_size=300,class_mode='categorical',color_mode=\"grayscale\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "7Do3MndNgQBg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "375f8aee-7466-44a6-c5ee-92846cea53aa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 15750 images belonging to 9 classes.\n"
          ]
        }
      ],
      "source": [
        "x_train = train_datagen.flow_from_directory('/content/drive/MyDrive/Dataset/training_set',target_size=(64,64),batch_size=300,class_mode='categorical',color_mode=\"grayscale\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "XZ6Rchw_gU0C"
      },
      "outputs": [],
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Convolution2D\n",
        "from keras.layers import MaxPooling2D\n",
        "from keras.layers import Dropout\n",
        "from keras.layers import Flatten"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "DsDTOuNCgqR7"
      },
      "outputs": [],
      "source": [
        "model = Sequential()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "fn35Flpbgs_1"
      },
      "outputs": [],
      "source": [
        "model.add(Convolution2D(32,(3,3),input_shape=(64,64,1), activation='relu'))\n",
        "#no. of feature detectors, size of feature detector, image size, activation function"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "-SeunPxHgvtp"
      },
      "outputs": [],
      "source": [
        "model.add(MaxPooling2D(pool_size=(2,2)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "RDL_LR3lgyqH"
      },
      "outputs": [],
      "source": [
        "model.add(Flatten())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "n0JMkX5-g1Xy"
      },
      "outputs": [],
      "source": [
        "model.add(Dense(units=512, activation = 'relu'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "H9OqFC3Ng351"
      },
      "outputs": [],
      "source": [
        "model.add(Dense(units=9,  activation = 'softmax'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "NJtl_uRtg7W3"
      },
      "outputs": [],
      "source": [
        "model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "id": "DufWitWRidRj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "18808858-6217-4466-b761-f05eab3ba8d0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "53"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "len(x_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "id": "Vy3xJOMDiiCX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9742fbd4-d232-40db-9c7f-856df37812cc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ],
      "source": [
        "len(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "HFffA2EIg_eB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c2121339-f904-4e57-e7ef-f173e53c6b62"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "5/5 [==============================] - 542s 123s/step - loss: 2.2102 - accuracy: 0.3180 - val_loss: 1.8533 - val_accuracy: 0.5644\n",
            "Epoch 2/10\n",
            "5/5 [==============================] - 214s 44s/step - loss: 1.3223 - accuracy: 0.7140 - val_loss: 0.8170 - val_accuracy: 0.7893\n",
            "Epoch 3/10\n",
            "5/5 [==============================] - 188s 37s/step - loss: 0.7355 - accuracy: 0.7587 - val_loss: 0.6943 - val_accuracy: 0.8173\n",
            "Epoch 4/10\n",
            "5/5 [==============================] - 169s 34s/step - loss: 0.5728 - accuracy: 0.8313 - val_loss: 0.5804 - val_accuracy: 0.8173\n",
            "Epoch 5/10\n",
            "5/5 [==============================] - 157s 31s/step - loss: 0.3738 - accuracy: 0.8913 - val_loss: 0.5063 - val_accuracy: 0.8636\n",
            "Epoch 6/10\n",
            "5/5 [==============================] - 129s 25s/step - loss: 0.3143 - accuracy: 0.9133 - val_loss: 0.4194 - val_accuracy: 0.8804\n",
            "Epoch 7/10\n",
            "5/5 [==============================] - 123s 25s/step - loss: 0.2390 - accuracy: 0.9273 - val_loss: 0.4245 - val_accuracy: 0.8844\n",
            "Epoch 8/10\n",
            "5/5 [==============================] - 106s 22s/step - loss: 0.2120 - accuracy: 0.9360 - val_loss: 0.3975 - val_accuracy: 0.8964\n",
            "Epoch 9/10\n",
            "5/5 [==============================] - 95s 19s/step - loss: 0.1944 - accuracy: 0.9548 - val_loss: 0.3663 - val_accuracy: 0.9076\n",
            "Epoch 10/10\n",
            "5/5 [==============================] - 96s 18s/step - loss: 0.1812 - accuracy: 0.9513 - val_loss: 0.3533 - val_accuracy: 0.9071\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f94bdec5410>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "model.fit(x_train,epochs=10,validation_data=x_test,steps_per_epoch=len(x_train)//10,validation_steps=len(x_test))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "A1zmGAwthJHM"
      },
      "outputs": [],
      "source": [
        "model.save('aslpng1.h5')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "GjUltbpUhmxo"
      },
      "outputs": [],
      "source": [
        "from keras.models import load_model\n",
        "import numpy as np\n",
        "import cv2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "GtpRm-3GhqAQ"
      },
      "outputs": [],
      "source": [
        "model=load_model('aslpng1.h5')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "FTmNCVN4htEM"
      },
      "outputs": [],
      "source": [
        "from keras.models import load_model\n",
        "import numpy as np\n",
        "import cv2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "LWO4OIg9hw5v"
      },
      "outputs": [],
      "source": [
        "model=load_model('aslpng1.h5')"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}